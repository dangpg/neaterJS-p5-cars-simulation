!function(t,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define("neaterJS",[],n):"object"==typeof exports?exports.neaterJS=n():t.neaterJS=n()}("undefined"!=typeof self?self:this,function(){return function(t){var n={};function e(i){if(n[i])return n[i].exports;var o=n[i]={i:i,l:!1,exports:{}};return t[i].call(o.exports,o,o.exports,e),o.l=!0,o.exports}return e.m=t,e.c=n,e.d=function(t,n,i){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:i})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(e.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)e.d(i,o,function(n){return t[n]}.bind(null,o));return i},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=5)}([function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.CONFIG=void 0;n.CONFIG={C1:1,C2:2,C3:4,COMPABILITY_THRESHOLD:3,PERCENTAGE_NEW_NODE:.03,PERCENTAGE_NEW_CONNECTION:.05,PERCENTAGE_MUTATION:.8,PERCENTAGE_MUTATION_ADJUST_WEIGHT:.9,STAGNATION_THRESHOLD:.05,ADJUST_WEIGHT_FACTOR:.2,NEW_WEIGHT_RANGE:1,ALLOW_LOOPS:!1}},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i,o=(i=e(2))&&i.__esModule?i:{default:i};function s(t,n){for(var e=0;e<n.length;e++){var i=n[e];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}var r=function(){function t(n,e,i,o){var s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},r=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0,u=arguments.length>6&&void 0!==arguments[6]?arguments[6]:0;!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.generation=n,this.numInputs=e,this.numOutputs=i,this.activation=o,this.fitness=u,this.species=r,this.brain=s}var n,e,i;return n=t,(e=[{key:"initialize",value:function(){this.brain=new o.default(this.numInputs,this.numOutputs,this.activation),this.brain.initialize()}},{key:"see",value:function(t){this.brain.setInputs(t)}},{key:"think",value:function(){return this.brain.activateNetwork()}},{key:"setFitness",value:function(t){this.fitness=t}},{key:"clone",value:function(){return new t(this.generation,this.numInputs,this.numOutputs,this.activation,this.brain.clone(),this.species,this.fitness)}}])&&s(n.prototype,e),i&&s(n,i),t}();n.default=r,t.exports=n.default},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i=c(e(7)),o=c(e(8)),s=c(e(9)),r=e(0),u=c(e(4)),a=e(3);function c(t){return t&&t.__esModule?t:{default:t}}function h(t,n){for(var e=0;e<n.length;e++){var i=n[e];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}var f=function(){function t(n,e,i){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.nodes=[],this.connections=[],this.numInputNodes=n,this.numOutputNodes=e,this.activation=i}var n,e,c;return n=t,(e=[{key:"initialize",value:function(){this.nodes.push(new o.default(0,i.default.BIAS,1));for(var t=0;t<this.numInputNodes;t++)this.nodes.push(new o.default(1+t,i.default.INPUT));for(var n=0;n<this.numOutputNodes;n++)this.nodes.push(new o.default(1+this.numInputNodes+n,i.default.OUTPUT));for(var e=this.getInputNodes(),c=this.getOutputNodes(),h=0;h<c.length;h++){var f=(0,a.randomDoubleFromInterval)(r.CONFIG.NEW_WEIGHT_RANGE,-r.CONFIG.NEW_WEIGHT_RANGE);this.connections.push(new s.default(0,h+this.numInputNodes+1,f,!0,u.default.getNextInnovationNumber(0,1+this.numInputNodes+h)))}for(var l=0;l<e.length;l++)for(var d=0;d<c.length;d++){var p=(0,a.randomDoubleFromInterval)(r.CONFIG.NEW_WEIGHT_RANGE,-r.CONFIG.NEW_WEIGHT_RANGE);this.connections.push(new s.default(l+1,d+this.numInputNodes+1,p,!0,u.default.getNextInnovationNumber(1+l,1+this.numInputNodes+d)))}}},{key:"getBiasNode",value:function(){return this.nodes[0]}},{key:"getInputNodes",value:function(){return this.nodes.slice(1,1+this.numInputNodes)}},{key:"getOutputNodes",value:function(){return this.nodes.slice(1+this.numInputNodes,1+this.numInputNodes+this.numOutputNodes)}},{key:"getHiddenNodes",value:function(){return this.nodes.slice(1+this.numInputNodes+this.numOutputNodes)}},{key:"addNode",value:function(){var t=this.connections[Math.floor(Math.random()*this.connections.length)];t.enabled=!1;var n=new o.default(u.default.getNextNodeId(t),i.default.HIDDEN);this.nodes.push(n),this.connections.push(new s.default(t.start,n.id,1,!0,u.default.getNextInnovationNumber(t.start,n.id))),this.connections.push(new s.default(n.id,t.end,t.weight,!0,u.default.getNextInnovationNumber(n.id,t.end)))}},{key:"addConnection",value:function(){if(!(this.getHiddenNodes().length<1)){for(var t,n,e=0,i=!1,o=this.getHiddenNodes().concat(this.getOutputNodes());!i;){if(t=this.nodes[Math.floor(Math.random()*this.nodes.length)],n=o[Math.floor(Math.random()*o.length)],i=!this.alreadyConnected(t,n),!r.CONFIG.ALLOW_LOOPS&&(i=i&&!this.sameNode(t,n))){var c=new s.default(t.id,n.id,1,!0,-1);i=!!this.sortNodes(c)}if(++e>50)return}var h=(0,a.randomDoubleFromInterval)(r.CONFIG.NEW_WEIGHT_RANGE,-r.CONFIG.NEW_WEIGHT_RANGE);this.connections.push(new s.default(t.id,n.id,h,!0,u.default.getNextInnovationNumber(t.id,n.id)))}}},{key:"isFullyConnected",value:function(){var t=this.getHiddenNodes().length,n=0;r.CONFIG.ALLOW_LOOPS?n=this.numInputNodes*(t+this.numOutputNodes)+t*(t+this.numOutputNodes)+(t+this.numOutputNodes)+this.numOutputNodes*(t+this.numOutputNodes):n=this.numInputNodes*(t+this.numOutputNodes)+t*(t-1+this.numOutputNodes)+(t+this.numOutputNodes);return n===this.connections.length}},{key:"alreadyConnected",value:function(t,n){for(var e=0;e<this.connections.length;e++)if(this.connections[e].start===t.id&&this.connections[e].end===n.id)return!0;return!1}},{key:"sameNode",value:function(t,n){return!r.CONFIG.ALLOW_LOOPS&&t.id===n.id}},{key:"resetNetwork",value:function(){for(var t=1;t<=this.nodes;t++)this.nodes[t].outputValue=0}},{key:"setInputs",value:function(t){for(var n=1;n<=this.numInputNodes;n++)this.nodes[n].outputValue=t[n-1]}},{key:"activateNetwork",value:function(){if(r.CONFIG.ALLOW_LOOPS){for(var t=this.getHiddenNodes(),n=0;n<t.length;n++)this.activateNode(t[n]);for(var e=this.getOutputNodes(),i=0;i<e.length;i++)this.activateNode(e[i])}else for(var o=this.sortNodes(),s=1+this.numInputNodes;s<o.length;s++)this.activateNode(o[s]);return this.getOutputNodes().map(function(t){return t.outputValue})}},{key:"activateNode",value:function(t){for(var n=this,e=this.connections.filter(function(n){return n.end===t.id}),i=0,o=function(t){if(!e[t].enabled)return"continue";var o=n.nodes.find(function(n){return n.id===e[t].start});i+=o.outputValue*e[t].weight},s=0;s<e.length;s++)o(s);t.outputValue=this.activation(i)}},{key:"sortNodes",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,n=[],e=[this.getBiasNode()].concat(this.getInputNodes()),i=this.getHiddenNodes().concat(this.getOutputNodes()),o=JSON.parse(JSON.stringify(this.connections.filter(function(t){return t.enabled})));t&&o.push(t);for(var s=function(){var t=e.splice(0,1)[0];n.push(t),o=o.filter(function(n){return n.start!==t.id});for(var s=function(t){o.some(function(n){return n.end===i[t].id})||e.push(i.splice(t,1)[0])},r=0;r<i.length;r++)s(r)};e.length>0;)s();return!(o.length>0)&&n}},{key:"clone",value:function(){for(var n=new t(this.numInputNodes,this.numOutputNodes,this.activation),e=0;e<this.nodes.length;e++)n.nodes.push(this.nodes[e].clone());for(var i=0;i<this.connections.length;i++)n.connections.push(this.connections[i].clone());return n}}])&&h(n.prototype,e),c&&h(n,c),t}();n.default=f,t.exports=n.default},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.randomDoubleFromInterval=function(t,n){return Math.random()*(t-n)+n}},function(t,n,e){"use strict";function i(t,n){for(var e=0;e<n.length;e++){var i=n[e];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var o=new(function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.connectionCounter=-1,this.connectionDict=[],this.nodeCounter=-1,this.nodeDict=[]}var n,e,o;return n=t,(e=[{key:"getNextNodeId",value:function(t){return this.nodeDict.some(function(n){return n.start===t.start&&n.end===t.end})?this.nodeDict.find(function(n){return n.start===t.start&&n.end===t.end}).nodeId:(this.nodeCounter++,this.nodeDict.push({start:t.start,end:t.end,nodeId:this.nodeCounter}),this.nodeCounter)}},{key:"getNextInnovationNumber",value:function(t,n){return this.connectionDict.some(function(e){return e.start===t&&e.end===n})?this.connectionDict.find(function(e){return e.start===t&&e.end===n}).innovation:(this.connectionCounter++,this.connectionDict.push({start:t,end:n,innovation:this.connectionCounter}),this.connectionCounter)}}])&&i(n.prototype,e),o&&i(n,o),t}());n.default=o,t.exports=n.default},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.init=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:100,n=arguments[1],e=arguments[2],i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:s.sigmoid,r=new o.default(t,n,e,i);return r.initialize(),r},Object.defineProperty(n,"CONFIG",{enumerable:!0,get:function(){return r.CONFIG}}),n.Activations=void 0;var i,o=(i=e(6))&&i.__esModule?i:{default:i},s=function(t){if(t&&t.__esModule)return t;var n={};if(null!=t)for(var e in t)if(Object.prototype.hasOwnProperty.call(t,e)){var i=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(t,e):{};i.get||i.set?Object.defineProperty(n,e,i):n[e]=t[e]}return n.default=t,n}(e(11));n.Activations=s;var r=e(0)},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i=r(e(1)),o=r(e(4)),s=r(e(10));function r(t){return t&&t.__esModule?t:{default:t}}function u(t){return function(t){if(Array.isArray(t)){for(var n=0,e=new Array(t.length);n<t.length;n++)e[n]=t[n];return e}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function a(t,n){for(var e=0;e<n.length;e++){var i=n[e];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}var c=function(){function t(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:100,e=arguments[1],i=arguments[2],o=arguments[3];!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.population=[],this.populationSize=n,this.numInputs=e,this.numOutputs=i,this.activation=o,this.generation=0,this.bestFitness=0,this.numStagnated=0,this.speciesDict={}}var n,e,r;return n=t,(e=[{key:"initialize",value:function(){o.default.nodeCounter=this.numInputs+this.numOutputs;for(var t=0;t<this.populationSize;t++){var n=new i.default(this.generation,this.numInputs,this.numOutputs,this.activation);n.initialize(),this.population.push(n)}this.speciesDict[0]=new s.default(0,this.population[0].clone())}},{key:"getNumberOfSpecies",value:function(){return[].concat(u(new Set(this.population.map(function(t){return t.species})))).length}},{key:"getOverallChampion",value:function(){return this.population.reduce(function(t,n){return t.fitness>n.fitness?t:n})}},{key:"repopulate",value:function(){var t=this;if(this.generation>0){var n=function(n){var e=t.speciesDict[n];e.dropOrganisms(),e.isStagnated()&&(t.population=t.population.filter(function(t){return t.species!==e.id}),delete t.speciesDict[n])};for(var e in this.speciesDict)n(e);var o=this.getOverallChampion();o.fitness>this.bestFitness?(this.bestFitness=o.fitness,this.numStagnated=0):this.numStagnated++}this.generation++;for(var r=0,a=this.population.length;r<a;r++){var c=!1;for(var e in this.speciesDict){var h=this.speciesDict[e];if(h.isCompatibleWith(this.population[r])){c=!0,h.assignToSpecies(this.population[r]);break}}if(!c){var f=Math.max.apply(Math,u(Object.keys(this.speciesDict).map(function(t){return+t})))+1;this.speciesDict[f]=new s.default(f,this.population[r].clone()),this.speciesDict[f].assignToSpecies(this.population[r])}}for(var l in this.speciesDict){this.speciesDict[l].organisms.length<1&&delete this.speciesDict[l]}for(var d=[].concat(u(new Set(this.population.map(function(t){return t.species})))),p=0,v=d.length;p<v;p++){var m=this.speciesDict[d[p]].organisms,g=m[Math.floor(Math.random()*m.length)].clone();this.speciesDict[d[p]].representative=g}var b=0;for(var N in this.speciesDict){var O=this.speciesDict[N];O.sortOrganisms(),O.cull(),O.adjustFitness(),O.calculateFitnessSum(),O.getChampion(),b+=O.fitnessSum}for(var y in this.speciesDict){var I=this.speciesDict[y];I.numOffsprings=Math.floor(I.fitnessSum/b*this.population.length),I.organisms.length<2?(I.numCloning=I.numOffsprings,I.numCrossover=0):(I.numCloning=Math.floor(.25*I.numOffsprings),I.numCrossover=I.numOffsprings-I.numCloning)}for(var C in this.population=[],this.speciesDict){var _=this.speciesDict[C];_.numOffsprings>0&&(_.reproduce(),this.population=this.population.concat(_.offsprings))}if(this.population.length<this.populationSize){var E=new i.default(this.generation,this.numInputs,this.numOutputs,this.activation);E.initialize();var w=Math.max.apply(Math,u(Object.keys(this.speciesDict).map(function(t){return+t})))+1;for(this.speciesDict[w]=new s.default(w,E.clone()),this.speciesDict[w].assignToSpecies(E),this.population.push(E);this.population.length<this.populationSize;){var S=new i.default(this.generation,this.numInputs,this.numOutputs,this.activation);S.initialize(),this.speciesDict[w].assignToSpecies(S),this.population.push(S)}}return this.population}}])&&a(n.prototype,e),r&&a(n,r),t}();n.default=c,t.exports=n.default},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;n.default={BIAS:"bias",INPUT:"input",OUTPUT:"output",HIDDEN:"hidden"},t.exports=n.default},function(t,n,e){"use strict";function i(t,n){for(var e=0;e<n.length;e++){var i=n[e];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var o=function(){function t(n,e){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.id=n,this.type=e,this.outputValue=i}var n,e,o;return n=t,(e=[{key:"clone",value:function(){return new t(this.id,this.type,this.outputValue)}}])&&i(n.prototype,e),o&&i(n,o),t}();n.default=o,t.exports=n.default},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i=e(0),o=e(3);function s(t,n){for(var e=0;e<n.length;e++){var i=n[e];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}var r=function(){function t(n,e,i,o,s){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.start=n,this.end=e,this.weight=i,this.enabled=o,this.innovation=s}var n,e,r;return n=t,(e=[{key:"adjustWeight",value:function(){this.weight+=(0,o.randomDoubleFromInterval)(this.weight*i.CONFIG.ADJUST_WEIGHT_FACTOR,-this.weight*i.CONFIG.ADJUST_WEIGHT_FACTOR)}},{key:"reassignWeight",value:function(){this.weight=(0,o.randomDoubleFromInterval)(i.CONFIG.NEW_WEIGHT_RANGE,-i.CONFIG.NEW_WEIGHT_RANGE)}},{key:"clone",value:function(){return new t(this.start,this.end,this.weight,this.enabled,this.innovation)}}])&&s(n.prototype,e),r&&s(n,r),t}();n.default=r,t.exports=n.default},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i=e(0),o=r(e(1)),s=r(e(2));function r(t){return t&&t.__esModule?t:{default:t}}function u(t){return function(t){if(Array.isArray(t)){for(var n=0,e=new Array(t.length);n<t.length;n++)e[n]=t[n];return e}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function a(t,n){for(var e=0;e<n.length;e++){var i=n[e];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}var c=function(){function t(n,e){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.id=n,this.representative=e,this.fitnessSum=0,this.organisms=[],this.numOffsprings=0,this.numCloning=0,this.numCrossover=0,this.offsprings=[],this.champion={},this.numStagnated=0}var n,e,r;return n=t,(e=[{key:"isStagnated",value:function(){return this.numStagnated>14}},{key:"dropOrganisms",value:function(){this.organisms=[],this.offsprings=[],this.fitnessSum=0,this.numOffsprings=0,this.numCloning=0,this.numCrossover=0}},{key:"assignToSpecies",value:function(t){t.species=this.id,this.organisms.push(t)}},{key:"adjustFitness",value:function(){for(var t=0,n=this.organisms.length;t<n;t++)this.organisms[t].fitness/=this.organisms.length}},{key:"calculateFitnessSum",value:function(){this.fitnessSum=0;for(var t=0,n=this.organisms.length;t<n;t++)this.fitnessSum+=this.organisms[t].fitness}},{key:"getChampion",value:function(){this.champion&&Math.abs(this.champion.fitness-this.organisms[0].fitness)<i.CONFIG.STAGNATION_THRESHOLD?this.numStagnated++:this.numStagnated=0,this.champion=this.organisms[0]}},{key:"isCompatibleWith",value:function(t){for(var n=this,e=0,o=0,s=0,r=0,a=this.representative.brain.connections[this.representative.brain.connections.length-1].innovation,c=t.brain.connections[t.brain.connections.length-1].innovation,h=[].concat(u(new Set([].concat(u(this.representative.brain.connections.map(function(t){return t.innovation})),u(t.brain.connections.map(function(t){return t.innovation})))))),f=function(i,u){n.representative.brain.connections.some(function(t){return t.innovation===h[i]})&&t.brain.connections.some(function(t){return t.innovation===h[i]})?(r+=Math.abs(n.representative.brain.connections.find(function(t){return t.innovation===h[i]}).weight-t.brain.connections.find(function(t){return t.innovation===h[i]}).weight),s++):n.representative.brain.connections.some(function(t){return t.innovation===h[i]})?h[i]<c?e++:o++:h[i]<a?e++:o++},l=0,d=h.length;l<d;l++)f(l);var p=s>0?r/s:0,v=Math.max(this.representative.brain.nodes.length+this.representative.brain.connections.length,t.brain.nodes.length+t.brain.connections.length);return i.CONFIG.C1*o/v+i.CONFIG.C2*e/v+i.CONFIG.C3*p<i.CONFIG.COMPABILITY_THRESHOLD}},{key:"sortOrganisms",value:function(){this.organisms.sort(function(t,n){return n.fitness-t.fitness})}},{key:"cull",value:function(){if(!(this.organisms.length<4)){this.calculateFitnessSum();for(var t=[],n=Math.floor(this.organisms.length/2);t.length<n;)for(var e=Math.random()*this.fitnessSum,i=0,o=0;o<this.organisms.length;o++)if((i+=this.organisms[o].fitness)>=e){var s=this.organisms.splice(o,1)[0];t.push(s),this.fitnessSum-=s.fitness;break}this.organisms=t}}},{key:"reproduce",value:function(){var t=this.champion.clone();t.generation+=1,this.offsprings.push(t),this.numCloning>0?this.numCloning--:this.numCrossover--;for(var n=0,e=this.numCloning;n<e;n++)for(var i=Math.random()*this.fitnessSum,o=0,s=0,r=this.organisms.length;s<r;s++)if((o+=this.organisms[s].fitness)>=i){var u=this.mutate(this.organisms[s]);u.generation++,this.offsprings.push(u);break}for(var a=0,c=this.numCrossover;a<c;a++){for(var h=Math.random()*this.fitnessSum,f=0,l=void 0,d=0,p=this.organisms.length;d<p;d++)if((f+=this.organisms[d].fitness)>=h){l=this.organisms[d];break}h=Math.random()*this.fitnessSum,f=0;var v=void 0;do{for(var m=0,g=this.organisms.length;m<g;m++)if((f+=this.organisms[m].fitness)>=h){v=this.organisms[m];break}h=Math.random()*this.fitnessSum,f=0}while(l===v);var b=this.mutate(this.crossover(l,v));this.offsprings.push(b)}}},{key:"mutate",value:function(t){for(var n=t.clone(),e=0,o=n.brain.connections.length;e<o;e++)Math.random()<i.CONFIG.PERCENTAGE_MUTATION&&(Math.random()<i.CONFIG.PERCENTAGE_MUTATION_ADJUST_WEIGHT?n.brain.connections[e].adjustWeight():n.brain.connections[e].reassignWeight());for(var s=0,r=n.brain.connections.filter(function(t){return!1===t.enabled}).length;s<r;s++)Math.random()<.25&&(n.brain.connections[s].enabled=!0);return Math.random()<i.CONFIG.PERCENTAGE_NEW_NODE&&n.brain.addNode(),Math.random()<i.CONFIG.PERCENTAGE_NEW_CONNECTION&&n.brain.addConnection(),n}},{key:"crossover",value:function(t,n){for(var e=new s.default(t.numInputs,t.numOutputs,t.activation),i=[].concat(u(new Set([].concat(u(t.brain.nodes.map(function(t){return t.id})),u(n.brain.nodes.map(function(t){return t.id})))))),r=function(o,s){t.brain.nodes.some(function(t){return t.id===i[o]})&&n.brain.nodes.some(function(t){return t.id===i[o]})&&(Math.random()<.5?e.nodes.push(t.brain.nodes.find(function(t){return t.id===i[o]}).clone()):e.nodes.push(n.brain.nodes.find(function(t){return t.id===i[o]}).clone()))},a=0,c=i.length;a<c;a++)r(a);var h=[].concat(u(new Set([].concat(u(t.brain.connections.map(function(t){return t.innovation})),u(n.brain.connections.map(function(t){return t.innovation})))))),f=function(i,o){t.brain.connections.some(function(t){return t.innovation===h[i]})&&n.brain.connections.some(function(t){return t.innovation===h[i]})?Math.random()<.5?e.connections.push(t.brain.connections.find(function(t){return t.innovation===h[i]}).clone()):e.connections.push(n.brain.connections.find(function(t){return t.innovation===h[i]}).clone()):t.brain.connections.some(function(t){return t.innovation===h[i]})?t.fitness>=n.fitness&&e.connections.push(t.brain.connections.find(function(t){return t.innovation===h[i]}).clone()):n.fitness>=t.fitness&&e.connections.push(n.brain.connections.find(function(t){return t.innovation===h[i]}).clone())};for(a=0,c=h.length;a<c;a++)f(a);var l=[].concat(u(new Set([].concat(u(e.connections.map(function(t){return t.start})),u(e.connections.map(function(t){return t.end})))))),d=function(i,o){e.nodes.find(function(t){return t.id===l[i]})||(t.brain.nodes.some(function(t){return t.id===l[i]})?e.nodes.push(t.brain.nodes.find(function(t){return t.id===l[i]}).clone()):e.nodes.push(n.brain.nodes.find(function(t){return t.id===l[i]}).clone()))};for(a=0,c=l.length;a<c;a++)d(a);return new o.default(t.generation+1,t.numInputs,t.numOutputs,t.activation,e,t.species)}}])&&a(n.prototype,e),r&&a(n,r),t}();n.default=c,t.exports=n.default},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.sigmoid=function(t){return 1/(1+Math.pow(Math.E,-4.9*t))},n.tanh=function(t){return Math.tanh(t)},n.binaryStep=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.5;return t<n?0:1}}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,